#!/bin/bash
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# resolve links - $0 may be a softlink
THIS="$0"
while [ -h "$THIS" ]; do
  ls=`ls -ld "$THIS"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    THIS="$link"
  else
    THIS=`dirname "$THIS"`/"$link"
  fi
done

# if no args specified, show usage
if [ $# = 0 ]; then
  echo "   _____                                 ________    ___________________________"
  echo "  /     \   ____   _____   ____ ___  ___/  _____/   /  _  \__    ___/\_   _____/"
  echo " /  \ /  \_/ __ \ /     \_/ __ \\  \/  /   \  ___  /  /_\  \|    |    |    __)_ "
  echo "/    Y    \  ___/|  Y Y  \  ___/ >    <\    \_\  \/    |    \    |    |  v0.1  \\"
  echo "\____|__  /\___  >__|_|  /\___  >__/\_ \\______  /\____|__  /____|   /_______  /"
  echo "        \/     \/      \/     \/      \/       \/         \/                 \/ "
  echo "Server side framework for large scale General Architecture Text Engineering tasks."
  echo "Usage: run COMMAND"
  echo "where COMMAND is one of:"
  echo "  ioWarc           load documents from WARC"
  echo "  ioNutch          load documents from Nutch segment(s)"
  echo "  ioHadoop         load documents from Hadoop Sequence files"
  echo "  importer         generate a SequenceFile containing BehemothDocuments given a directory of raw docs"
  echo "  reader           read and inspect document corpus"
  echo "  exporter         read and execute intermediate document extraction creating new corpus"
  echo "  filter           filter documents and create new corpus"
  echo "  gate             process documents using MemexGATE apps"
  echo "  tika             parse documents using Tika"
  echo "  uima             process documents using UIMA"
  echo "  mahout           generate vectors for clustering with Mahout"
  echo "  solr             send documents to Solr for indexing"
  echo "  elastic          send documents to ElasticSearch for indexing"
  echo "  language-id      identify the language of documents"
  echo "Most commands print help when invoked w/o parameters."
  exit 1
fi

# get arguments
COMMAND=$1
shift

# some directories
THIS_DIR="`dirname "$THIS"`"
MEMEXGATE_HOME="`cd "$THIS_DIR/.." ; pwd`"

# figure out which class to run
if [ "$COMMAND" = "reader" ] ; then
  CLASS=com.digitalpebble.behemoth.util.CorpusReader
  MODULE=core
elif [ "$COMMAND" = "ioNutch" ] ; then
  CLASS=com.digitalpebble.behemoth.io.nutch.NutchSegmentConverterJob
  MODULE=io
elif [ "$COMMAND" = "ioWarc" ] ; then
  CLASS=com.digitalpebble.behemoth.io.warc.WARCConverterJob
  MODULE=io
elif [ "$COMMAND" = "ioHadoop" ] ; then
  CLASS=com.digitalpebble.behemoth.io.sequencefile.SequenceFileConverterJob
  MODULE=io
elif [ "$COMMAND" = "filter" ] ; then
  CLASS=com.digitalpebble.behemoth.util.CorpusFilter
  MODULE=core
elif [ "$COMMAND" = "importer" ] ; then
  CLASS=com.digitalpebble.behemoth.util.CorpusGenerator
  MODULE=core
elif [ "$COMMAND" = "exporter" ] ; then
CLASS=com.digitalpebble.behemoth.util.ContentExtractor
  MODULE=core
elif [ "$COMMAND" = "gate" ] ; then
  CLASS=com.digitalpebble.behemoth.gate.GATEDriver
  MODULE=gate
elif [ "$COMMAND" = "tika" ] ; then
  CLASS=com.digitalpebble.behemoth.tika.TikaDriver
  MODULE=tika
elif [ "$COMMAND" = "uima" ] ; then
  CLASS=com.digitalpebble.behemoth.uima.UIMADriver
  MODULE=uima
elif [ "$COMMAND" = "mahout" ] ; then
  CLASS=com.digitalpebble.behemoth.mahout.SparseVectorsFromBehemoth
  MODULE=mahout
elif [ "$COMMAND" = "solr" ] ; then
  CLASS=com.digitalpebble.behemoth.solr.SOLRIndexerJob
  MODULE=solr
elif [ "$COMMAND" = "elastic" ] ; then
  CLASS=com.digitalpebble.behemoth.es.ESIndexerJob
  MODULE=elasticsearch
elif [ "$COMMAND" = "language-id" ] ; then
  CLASS=com.digitalpebble.behemoth.languageidentification.LanguageIdDriver
  MODULE=language-id
else
  echo "unknown command"
  exit -1;
fi

BEHE_JOB=$MEMEXGATE_HOME/legisgate/libext/behemoth-$MODULE-*-job.jar
EXEC_CALL="hadoop jar $BEHE_JOB"

# check that hadoop can be found on the path
if [ $(which hadoop | wc -l ) -eq 0 ]; then
  echo "Can't find Hadoop executable. Add HADOOP_HOME/bin to the path"
  exit -1;
fi

# run it
exec $EXEC_CALL $CLASS "$@"

